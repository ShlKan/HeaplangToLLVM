(* triple = (loc triple, int, loc triple) *)

Definition get_left : val (* triple, loc triple *) :=
  位: "v", Fst "v".

Definition get_right : val (* triple, loc triple *) :=
  位: "v", Snd (Snd "v").

Definition get_mid : val (* triple, int *):=
  位: "v", Fst (Snd "v").

Definition qm : val (*int, pair(int, int)*) :=
  位: "v",
  let: "q" := "v" `quot` #2 in
  ("q", "v" `rem` #2).

Definition map_get : val (* loc triple, fun (int, pair (int, int)), int, int, int, int, int *) :=
  rec: "map_get" "m" "f" "base" "left" "right" "key" :=
  if: "m" = (* loc triple *) #() then #0
  else
    if: "key" = "base" then
      get_mid (! "m")
    else
      let: "res" := "f" "key" in
      if: (Snd "res") = #0 then
        map_get (get_left (! "m")) "f" "base" "left" "right" (Fst "res")
      else
        map_get (get_right (! "m")) "f" "base" "left" "right" (Fst "res").

Definition main : val (* void , int *) :=
rec: "main" "vd" :=
let: "x" := ref ((* loc triple *)#(), (#12,  (* loc triple *) #())) in
let: "x1" := ref ((* loc triple *)#(), (#34,  (* loc triple *) #())) in
let: "y" := ref ("x", (#12, "x1")) in
let: "z" := map_get "y" qm #1 #0 #1 #2 in
print "z" ;;
let: "z1" := map_get "y" qm #1 #0 #1 #3 in
print "z1";;
let: "emp" := map_get ((* loc triple *) #()) qm #1 #0 #1 #123 in
print "emp";;
#0.
