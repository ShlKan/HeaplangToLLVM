(* triple = (loc triple, int, loc triple) *)

Definition get_left : val (* triple, loc triple *) :=
  位: "v", Fst "v".

Definition get_right : val (* triple, loc triple *) :=
  位: "v", Snd (Snd "v").

Definition get_mid : val (* triple, int *):=
  位: "v", Fst (Snd "v").

Definition qm : val (*int, pair(int, int)*) :=
  位: "v",
  let: "q" := "v" `quot` #2 in
  ("q", "v" `rem` #2).

Definition map_get : val (* loc triple, fun (int, pair (int, int)), int, int, int, int, int *) :=
  rec: "map_get" "m" "f" "base" "left" "right" "key" :=
  if: "key" = "base" then
    get_mid (! "m")
  else
  #0.

Definition main : val (* void , int *) :=
rec: "main" "vd" :=
let: "x" := ref ((* loc triple *)#(), (#23,  (* loc triple *) #())) in
let: "z" := map_get "x" qm #1 #0 #1 #1 in
print "z" ;;
#0.
